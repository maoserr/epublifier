# For unknown URLs
# Main parser determine whether page is toc/chapter and sends back function name and function type
main_parser: |
  var link = new URL(url);
  var parser = new DOMParser();
  var dom = parser.parseFromString(source, "text/html");
  switch (link.hostname) {
    case "www.novelupdates.com":
      var paths = link.pathname.split("/");
      if (paths.length > 1 && paths[1] == "series") {
        return {page_type:"toc", parser:"chaps_nu"};
      }
  }
  // Default to all links
  return {page_type:"toc", parser:"chaps_all_links"};

# TOC parsers, returns a list of chapters + metadata
toc_parsers:
  chaps_nu:
    name: Novel Update
    code: |
      var parser = new DOMParser();
      var dom = parser.parseFromString(source, "text/html");
      var chap_popup = dom.querySelector("#my_popupreading");
      if (chap_popup == null) {
          return []
      }
      var chap_lis = chap_popup.querySelectorAll("a");
      var chaps = [];
      chap_lis.forEach((element) => {
          if (element.href.includes("extnu")) {
              chaps.unshift({
                  url_title: element.innerText,
                  url: helpers["link_fixer"](element.href, url),
              });
          }
      });
      var tit = dom.querySelector(".seriestitlenu").innerText;
      var desc = dom.querySelector("#editdescription").innerHTML;
      var auth = dom.querySelector("#authtag").innerText;
      var img = dom.querySelector(".serieseditimg > img");
      if (img == null){
        img = dom.querySelector(".seriesimg > img");
      }
      return {"chaps":chaps,
       meta:{title:tit, description: desc, author: auth, cover: img.src, publisher: "Novel Update"}
      };

  chaps_name_search:
    name: Chapter Links
    code: |
      var parser = new DOMParser();
      var dom = parser.parseFromString(source, "text/html");
      var ancs = dom.querySelectorAll("a");
      var chaps = []
      ancs.forEach((element) => {
            if(RegExp(/chap|part/i).test(element.innerText)){
              chaps.push({
                  url_title: element.innerText,
                  url: helpers["link_fixer"](element.href, url),
              });
            }
      });
      return {"chaps":chaps,
        meta:{}
      };
  chaps_all_links:
    name: All Links
    code: |
      var parser = new DOMParser();
      var dom = parser.parseFromString(source, "text/html");
      var ancs = dom.querySelectorAll("a");
      var chaps = []
      ancs.forEach((element) => {
          chaps.push({
              url_title: element.innerText,
              url: helpers["link_fixer"](element.href, url),
          });
      });
      return {"chaps":chaps,
        meta:{}
      };


# Determines type of chapter parser to use
chap_main_parser: |
  var url = new URL(url);
  var parser = new DOMParser();
  var dom = parser.parseFromString(source, "text/html");

  // Generic parser
  return {chap_type: "chap", parser:"chaps_readability"};

# Chapter parsers, return chapter content, and optionally next chapter.
chap_parsers:
  chaps_readability:
    name: Readability
    code: |
      var parser = new DOMParser();
      var dom = parser.parseFromString(source, "text/html");
      console.log(helpers["readability"](dom))
      var new_link = null;
      var subchaps = [];

      // Wordpress content
      var main_cont = dom.querySelector(".entry-content")
      if(main_cont != null){
        var ancs = main_cont.querySelectorAll("a");
        ancs.forEach((element) => {
              if(RegExp(/click here to read|read here|continue reading/i).test(element.innerText)){
                new_link = helpers["link_fixer"](element.href, url);
              } else if (RegExp(/^chapter|^part/i).test(element.innerText)) {
                subchaps.push(helpers["link_fixer"](element.href, url))
              }
        });
      }
      if (new_link != null) {
          var res = await fetch(new_link);
          var r_txt = await res.text();
          dom = parser.parseFromString(r_txt, "text/html");
          var out = helpers["readability"](dom);
          return {title: out.title, html: out.content};
      } else if (subchaps.length > 0) {
          var html = "";
          for(var subc in subchaps){
            console.log(subchaps[subc]);
            var cres = await fetch(subchaps[subc]);
            var c_txt = await cres.text();
            var cdom = parser.parseFromString(c_txt, "text/html");
            var out = helpers["readability"](cdom);
            html += "<h1>"+out.title+"</h1>"+ out.content
          }
          return {title: title, html: html};
      }
      var out = helpers["readability"](dom);
      return {title: out.title, html: out.content};

  chaps_raw:
    name: No Parse
    code: |
      return {title: title, html: source}